generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(cuid())
  name               String?
  email              String                @unique
  emailVerified      DateTime?
  bannerImage        String?
  credits            Int                   @default(50)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  image              String?
  level              Int                   @default(1)
  hashedPassword     String?
  verified           Boolean               @default(false)
  hasCompletedOnboarding Boolean @default(false)
  onboardingAnswers  Json? @default("{}")
  subscriptionStatus SubscriptionStatus    @default(INACTIVE)
  weeklyNewsletter   Boolean               @default(false)
  accounts           Account[]
  chatMessages       ChatMessage[]
  collections        Collection[]
  communityMessages  CommunityMessage[]
  transactions       CreditTransaction[]
  followers          Follow[]              @relation("Following")
  following          Follow[]              @relation("Followers")
  likes              Like[]
  receivedMessages   Message[]             @relation("ReceivedMessages")
  sentMessages       Message[]             @relation("SentMessages")
  notifications      Notification[]
  payments           Payment[]
  pollVotes          PollVote[]
  posts              Post[]
  projects           Project[]
  collaborations     ProjectCollaborator[]
  sessions           Session[]
  subscriptions      Subscription[]
  threadMessages     ThreadMessage[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CreditTransaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Int
  type        TransactionType
  description String
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  amount            Float
  reference         String   @unique
  status            String
  provider          String
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  providerReference String?
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Post {
  id          String           @id @default(cuid())
  imageUrl    String
  caption     String?
  userId      String
  createdAt   DateTime         @default(now())
  shares      Int              @default(0)
  attachments Json?            @default("[]")
  collections CollectionPost[]
  likes       Like[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Project {
  id            String                @id @default(cuid())
  name          String
  description   String?
  userId        String
  clientId      String
  canvasData    Json                  @default("{\"elements\": [], \"canvasStack\": [{\"id\": \"root\", \"name\": \"Root Canvas\", \"elements\": [], \"parentId\": null}]}")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  version       Int                   @default(1)
  messages      ChatMessage[]
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  thumbnail     String?
  client        Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  milestones    Milestone[]

  @@index([userId])
  @@index([clientId])
}

model ProjectCollaborator {
  id        String           @id @default(cuid())
  projectId String
  userId    String
  role      CollaboratorRole
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model CaseStudy {
  id              String   @id @default(cuid())
  name            String
  location        String
  year            Int
  typology        String
  relevance_score Float
  description     String?
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([location])
  @@index([year])
  @@index([typology])
  @@index([relevance_score])
}

model ChatMessage {
  id                String   @id @default(cuid())
  content           String
  role              String
  projectId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  hasGenerateAction Boolean  @default(false)
  isGeneratedImage  Boolean  @default(false)
  prompt            String?
  selectedElement   Json?
  sources           Json?
  project           Project  @relation(fields: [projectId], references: [id])
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  status    String
  startDate DateTime @default(now())
  endDate   DateTime
  autoRenew Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([endDate])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  metadata  Json             @default("{}")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  canvasData  Json     @default("{\"elements\": [], \"canvasStack\": [{\"id\": \"root\", \"name\": \"Root Canvas\", \"elements\": [], \"parentId\": null}]}")
  type        String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id                  String        @id @default(cuid())
  userId              String
  amount              Float
  credits             Int
  status              PaymentStatus @default(PENDING)
  method              PaymentMethod
  description         String?
  providerPaymentId   String?
  providerReferenceId String?
  providerStatus      String?
  metadata            Json          @default("{}")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([method])
  @@index([providerPaymentId])
}

model CommunityCategory {
  id          String             @id @default(cuid())
  name        String
  description String?
  order       Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  channels    CommunityChannel[]
}

model CommunityChannel {
  id          String             @id @default(cuid())
  name        String
  description String?
  categoryId  String
  order       Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  category    CommunityCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  messages    CommunityMessage[]

  @@index([categoryId])
}

model CommunityMessage {
  id          String           @id @default(cuid())
  content     String
  channelId   String
  userId      String
  likes       Int              @default(0)
  isThread    Boolean          @default(false)
  isPoll      Boolean          @default(false)
  threadId    String?
  pollId      String?
  attachments Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  channel     CommunityChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  poll        Poll?            @relation(fields: [pollId], references: [id])
  thread      Thread?          @relation(fields: [threadId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([userId])
  @@index([threadId])
  @@index([pollId])
}

model Thread {
  id             String             @id @default(cuid())
  title          String
  isPrivate      Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  messages       CommunityMessage[]
  threadMessages ThreadMessage[]
}

model ThreadMessage {
  id          String   @id @default(cuid())
  content     String
  threadId    String
  userId      String
  likes       Int      @default(0)
  attachments Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  thread      Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([userId])
}

model Poll {
  id            String             @id @default(cuid())
  question      String
  options       Json
  duration      String
  allowMultiple Boolean            @default(false)
  expiresAt     DateTime
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  messages      CommunityMessage[]
  votes         PollVote[]
}

model PollVote {
  id        String   @id @default(cuid())
  pollId    String
  userId    String
  options   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
  @@index([pollId])
  @@index([userId])
}

model MessageLike {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model Collection {
  id          String           @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       CollectionPost[]

  @@index([userId])
}

model CollectionPost {
  id           String     @id @default(cuid())
  postId       String
  collectionId String
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, collectionId])
  @@index([collectionId])
  @@index([postId])
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project[]
}

model Milestone {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  start       DateTime
  end         DateTime
  color       String   @default("#8b5cf6") // default purple
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

enum TransactionType {
  PURCHASE
  REFUND
  BONUS
  USAGE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  CANCELLED
}

enum CollaboratorRole {
  VIEWER
  EDITOR
}

enum NotificationType {
  CREDITS_LOW
  NEW_FEATURE
  WEEKLY_SUMMARY
  COLLABORATION_INVITE
  COLLABORATION_ACCEPTED
  COLLABORATION_REJECTED
  PROJECT_UPDATED
  PROJECT_INVITATION
}

enum PaymentMethod {
  MOBILE_MONEY
  CREDIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}
