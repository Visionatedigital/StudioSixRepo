generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bannerImage   String?
  credits       Int       @default(50)
  level         Int       @default(1)
  hashedPassword String?
  verified      Boolean   @default(false)
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  posts         Post[]
  likes         Like[]
  followers     Follow[]  @relation("Following")
  following     Follow[]  @relation("Followers")
  chatMessages  ChatMessage[]
  transactions  CreditTransaction[]
  subscriptions Subscription[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  collaborations   ProjectCollaborator[]
  notifications    Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CreditTransaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Int
  type        TransactionType
  description String
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  amount            Float
  reference         String   @unique
  status            String
  provider          String
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  providerReference String?
}

model Follow {
  followerId  String
  followingId String
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Post {
  id        String   @id @default(cuid())
  imageUrl  String
  caption   String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]
  shares    Int      @default(0)

  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Project {
  id            String      @id @default(cuid())
  name          String
  description   String?
  canvasData    Json        @default("{\"elements\":[],\"canvasStack\":[{\"id\":\"root\",\"name\":\"Root Canvas\",\"elements\":[],\"parentId\":null}]}")
  version       Int         @default(1)
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  messages      ChatMessage[]
  collaborators ProjectCollaborator[]

  @@index([userId])
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      CollaboratorRole
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model CaseStudy {
  id              String   @id @default(cuid())
  name            String
  location        String
  year            Int
  typology        String
  relevance_score Float
  description     String?
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([location])
  @@index([year])
  @@index([typology])
  @@index([relevance_score])
}

model ChatMessage {
  id              String   @id @default(cuid())
  content         String
  role            String
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  hasGenerateAction Boolean @default(false)
  isGeneratedImage Boolean @default(false)
  selectedElement  Json?
  prompt          String?
  sources         Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([projectId])
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  receiverId  String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId        String   // e.g., "starter-plan", "pro-plan", "enterprise-plan"
  status        String   // ACTIVE, EXPIRED, CANCELLED
  startDate     DateTime @default(now())
  endDate       DateTime
  autoRenew     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([endDate])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  metadata  Json             @default("{}")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  canvasData  Json     @default("{\"elements\":[],\"canvasStack\":[{\"id\":\"root\",\"name\":\"Root Canvas\",\"elements\":[],\"parentId\":null}]}")
  type        String   // e.g., "concept", "floorplan", "elevation"
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TransactionType {
  PURCHASE
  REFUND
  BONUS
  USAGE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  CANCELLED
}

enum CollaboratorRole {
  VIEWER
  EDITOR
}

enum NotificationType {
  CREDITS_LOW
  NEW_FEATURE
  WEEKLY_SUMMARY
  COLLABORATION_INVITE
  COLLABORATION_ACCEPTED
  COLLABORATION_REJECTED
  PROJECT_UPDATED
  PROJECT_INVITATION
}
