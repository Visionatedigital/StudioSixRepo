const fs = require('fs');
const path = require('path');

const libraryPath = path.join(process.cwd(), 'public/library');
const outputPath = path.join(process.cwd(), 'src/lib/generated-assets.ts');

function generateAssetManifest() {
  const libraryGroups = [];
  try {
    const topLevelDirs = fs.readdirSync(libraryPath, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);

    for (const groupName of topLevelDirs) {
      const groupPath = path.join(libraryPath, groupName);
      const categories = fs.readdirSync(groupPath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name);

      const groupCategories = [];
      for (const categoryName of categories) {
        const assetPath = path.join(groupPath, categoryName);
        const assets = fs.readdirSync(assetPath)
          .filter(file => file.toLowerCase().endsWith('.svg'))
          .map(file => {
            const fileName = path.parse(file).name;
            return {
              id: `${categoryName.toLowerCase().replace(/\s+/g, '-')}-${fileName.toLowerCase()}`,
              name: fileName.replace(/-/g, ' '),
              svgPath: `/library/${groupName}/${categoryName}/${file}`,
            };
          });

        if (assets.length > 0) {
          const category = {
            id: categoryName.toLowerCase().replace(/\s+/g, '-'),
            name: categoryName,
            itemCount: assets.length,
            icon: assets[0].svgPath, // Use the first asset as the icon
            assets: assets,
          };
          groupCategories.push(category);
        }
      }

      if (groupCategories.length > 0) {
        const group = {
          id: groupName.toLowerCase().replace(/\s+/g, '-'),
          name: groupName,
          categories: groupCategories,
        };
        libraryGroups.push(group);
      }
    }

    const fileContent = `// This file is auto-generated by scripts/generate-asset-manifest.js
// Do not edit this file directly.
import { LibraryGroup } from './library-assets';

export const generatedLibraryGroups: LibraryGroup[] = ${JSON.stringify(libraryGroups, null, 2)};
`;

    fs.writeFileSync(outputPath, fileContent, 'utf8');
    console.log(`✅ Asset manifest generated successfully at ${outputPath}`);
    console.log(`Found ${libraryGroups.length} groups.`);

  } catch (error) {
    console.error('❌ Error generating asset manifest:', error);
    if (error.code === 'ENOENT') {
      console.error('Please make sure the directory public/library exists and has the correct structure.');
    }
  }
}

generateAssetManifest(); 